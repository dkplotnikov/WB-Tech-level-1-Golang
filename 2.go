package main

// Написать программу, которая конкурентно рассчитает значение квадратов чисел
// взятых из массива (2,4,6,8,10) и выведет их квадраты в stdout.

import (
	"fmt"
	"sync"
)

func main() {
	var nums = []int{2, 4, 6, 8, 10}

	// WaitGroup для рутин
	var wg sync.WaitGroup
	for _, num := range nums {
		// Добавляем 1 в счетчик wg перед запуском очередной рутины
		wg.Add(1)
		// В функцию передается num, иначе рутина будет использовать значение num на момент ее выполнения,
		// что приведет к вычислению квадрата 10 во всех рутинах (именно 10 т.к. значений мало).
		// Можно, например, перетирать num в скопе тела цикла: num := num
		go func(num int) {
			pow := num * num
			// Поскольку Println вызывает Fprintln с os.Stdout, просто используем ее
			// func Println(a ...interface{}) (n int, err error) {
			// 	  return Fprintln(os.Stdout, a...)
			// }
			fmt.Println(pow)
			// По завершению работы рутины декрементируем каунтер в wg
			wg.Done()
		}(num)
	}
	// Ждем завершения работы всех рутин.
	wg.Wait()

	// В результате значения квадратов будут записаны в случайном порядке
}
